#!/bin/bash

JOB_NAME=server
STORE_DIR=/var/vcap/store/${JOB_NAME}
LOG_DIR=/var/vcap/sys/log/${JOB_NAME}
JOB_DIR=/var/vcap/jobs/${JOB_NAME}
PIDFILE=${STORE_DIR}/vf.gf.${JOB_NAME}.pid

export JAVA_HOME=/var/vcap/packages/java
export GEODE_HOME=/var/vcap/packages/geode

export PATH=${JAVA_HOME}/bin:${GEODE_HOME}/bin:$PATH

# calculate the JVM heap size

INSTANCE_MEMORY=$( awk '/MemTotal/ {print int($2 / 1024)}' /proc/meminfo )
AVAILABLE_MEMORY=$( awk '/MemAvailable/ {print int($2 / 1024)}' /proc/meminfo )

if [ "$INSTANCE_MEMORY" -lt 8192 ]
then
  JVM_MEM=$((INSTANCE_MEMORY * 9 / 10))
else
  JVM_MEM=$((INSTANCE_MEMORY - 1024))
fi

if [ "$AVAILABLE_MEMORY" -lt "$JVM_MEM" ]
then
  JVM_MEM=$(($AVAILABLE_MEMORY * 9 / 10))
  echo "WARNING: available memory ($AVAILABLE_MEMORY) is less than you have tried to allocate for geode ($JVM_MEM). Dropping down to use 90% of available mem instead."
fi

case $1 in
  start)
    mkdir -p ${STORE_DIR} ${LOG_DIR}
    chown -R vcap:vcap ${STORE_DIR} ${LOG_DIR}

    chpst -u vcap:vcap gfsh start server --name=`hostname` \
      --mcast-port=0                                       \
      --dir=${STORE_DIR}                                   \
      --max-heap="$JVM_MEM"m                               \
      --initial-heap="$JVM_MEM"m                           \
      --server-port=<%= p("server.port") %>                \
      --cache-xml-file=${JOB_DIR}/cache.xml                \
      --locators=<%= link('locator').instances.map { |x| x.address + '[' + link('locator').p('locator.port').to_s + ']' }.join(',')  %> &>> ${LOG_DIR}/${JOB_NAME}.log
    ;;

  stop)
    kill -9 `cat ${PIDFILE}`
    rm -f $PIDFILE
    ;;

  *)
    echo "Usage: ctl {start|stop}" ;;
esac